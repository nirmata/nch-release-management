#!/bin/bash

set -euo pipefail

RELEASE="nch-4.22.11"
WORKFLOW_RUN="test-local-merge"
SCAN_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

echo "Creating complete merged scan-grype.json..."

# Extract users vulnerabilities  
USERS_VULNS=$(jq -c '[
    .matches[] | {
        name: .artifact.name,
        installed: .artifact.version,
        fixed_in: (if .vulnerability.fix.versions and (.vulnerability.fix.versions | length > 0) then .vulnerability.fix.versions[0] else "" end),
        type: .artifact.type,
        vulnerability: .vulnerability.id,
        severity: .vulnerability.severity,
        epss: (if .vulnerability.epss then (.vulnerability.epss[0].percentile * 100 | tostring) + "%" else "N/A" end),
        risk: (if .vulnerability.risk then (.vulnerability.risk | tostring) else "N/A" end),
        published_date: "N/A"
    }
]' users-scan.json)

USERS_COUNT=$(echo "$USERS_VULNS" | jq 'length')

# Extract gateway vulnerabilities
GATEWAY_VULNS=$(jq -c '[
    .matches[] | {
        name: .artifact.name,
        installed: .artifact.version,
        fixed_in: (if .vulnerability.fix.versions and (.vulnerability.fix.versions | length > 0) then .vulnerability.fix.versions[0] else "" end),
        type: .artifact.type,
        vulnerability: .vulnerability.id,
        severity: .vulnerability.severity,
        epss: (if .vulnerability.epss then (.vulnerability.epss[0].percentile * 100 | tostring) + "%" else "N/A" end),
        risk: (if .vulnerability.risk then (.vulnerability.risk | tostring) else "N/A" end),
        published_date: "N/A"
    }
]' client-gateway-scan.json)

GATEWAY_COUNT=$(echo "$GATEWAY_VULNS" | jq 'length')

# Create the final merged JSON
jq -n \
    --arg scan_date "$SCAN_DATE" \
    --arg release "$RELEASE" \
    --arg workflow_run "$WORKFLOW_RUN" \
    --argjson users_count "$USERS_COUNT" \
    --argjson gateway_count "$GATEWAY_COUNT" \
    --argjson users_vulns "$USERS_VULNS" \
    --argjson gateway_vulns "$GATEWAY_VULNS" \
    '{
        scanInfo: {
            scanDate: $scan_date,
            release: $release,
            scanner: "Grype",
            workflowRun: $workflow_run
        },
        images: [
            {
                image: "ghcr.io/nirmata/users:4.22.11",
                status: "success",
                vulnerabilityCount: $users_count,
                scan: {
                    vulnerabilities: $users_vulns
                }
            },
            {
                image: "ghcr.io/nirmata/client-gateway:4.22.11", 
                status: "success",
                vulnerabilityCount: $gateway_count,
                scan: {
                    vulnerabilities: $gateway_vulns
                }
            }
        ]
    }' > scan-grype-fixed.json

echo "âœ… Successfully created scan-grype-fixed.json"
echo "Summary:"
echo "- Users image: $USERS_COUNT vulnerabilities"
echo "- Gateway image: $GATEWAY_COUNT vulnerabilities"

echo ""
echo "Sample vulnerability data:"
jq '.images[0].scan.vulnerabilities[0]' scan-grype-fixed.json
