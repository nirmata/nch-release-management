#!/bin/bash

# Script to merge two Grype JSON scan results into the expected scan-grype.json format

set -euo pipefail

RELEASE="nch-4.22.11"
WORKFLOW_RUN="test-local-merge"
SCAN_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

USERS_JSON="users-scan.json"
GATEWAY_JSON="client-gateway-scan.json"
OUTPUT_JSON="scan-grype-merged.json"

echo "Merging Grype scan results for $RELEASE"
echo "Users JSON: $USERS_JSON"
echo "Gateway JSON: $GATEWAY_JSON"
echo "Output: $OUTPUT_JSON"

# Function to extract vulnerability data from Grype JSON and convert to our format
extract_vulnerabilities() {
    local json_file="$1"
    local image_name="$2"
    
    echo "Processing $image_name from $json_file"
    
    # Count vulnerabilities
    local vuln_count=$(jq '.matches | length' "$json_file")
    echo "Found $vuln_count vulnerabilities in $image_name"
    
    # Extract vulnerability details
    local vulnerabilities=$(jq -c '[
        .matches[] | {
            name: .artifact.name,
            installed: .artifact.version,
            fixed_in: (if .vulnerability.fix.versions then (.vulnerability.fix.versions[0] // "") else "" end),
            type: .artifact.type,
            vulnerability: .vulnerability.id,
            severity: .vulnerability.severity,
            epss: (if .vulnerability.epss then (.vulnerability.epss[0].percentile | tostring) + "%" else "N/A" end),
            risk: (if .vulnerability.risk then (.vulnerability.risk | tostring) else "N/A" end),
            published_date: "N/A"
        }
    ]' "$json_file")
    
    # Create image entry
    local image_entry=$(jq -n \
        --arg image "$image_name" \
        --argjson count "$vuln_count" \
        --argjson vulns "$vulnerabilities" \
        '{
            image: $image,
            status: "success",
            vulnerabilityCount: $count,
            scan: {
                vulnerabilities: $vulns
            }
        }')
    
    echo "$image_entry"
}

echo "Creating merged scan-grype.json..."

# Extract vulnerabilities for both images
USERS_DATA=$(extract_vulnerabilities "$USERS_JSON" "ghcr.io/nirmata/users:4.22.11")
GATEWAY_DATA=$(extract_vulnerabilities "$GATEWAY_JSON" "ghcr.io/nirmata/client-gateway:4.22.11")

# Create the final merged JSON
jq -n \
    --arg scan_date "$SCAN_DATE" \
    --arg release "$RELEASE" \
    --arg workflow_run "$WORKFLOW_RUN" \
    --argjson users "$USERS_DATA" \
    --argjson gateway "$GATEWAY_DATA" \
    '{
        scanInfo: {
            scanDate: $scan_date,
            release: $release,
            scanner: "Grype",
            workflowRun: $workflow_run
        },
        images: [$users, $gateway]
    }' > "$OUTPUT_JSON"

echo "âœ… Successfully created $OUTPUT_JSON"
echo "Summary:"
echo "- Users image: $(echo "$USERS_DATA" | jq '.vulnerabilityCount') vulnerabilities"
echo "- Gateway image: $(echo "$GATEWAY_DATA" | jq '.vulnerabilityCount') vulnerabilities"

echo ""
echo "Sample vulnerability data:"
jq '.images[0].scan.vulnerabilities[0]' "$OUTPUT_JSON"
