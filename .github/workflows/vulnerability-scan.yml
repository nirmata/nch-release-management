name: Vulnerability Scan

on:
  schedule:
    # Run at 1:00 AM PST (9:00 AM UTC during standard time, 8:00 AM UTC during daylight time)
    # Using 9:00 AM UTC to cover PST standard time
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      release_filter:
        description: 'Specific release to scan (e.g., nch-4.22). Leave empty to scan all releases.'
        required: false
        type: string
      
jobs:
  discover-releases:
    runs-on: ubuntu-latest
    outputs:
      releases: ${{ steps.find-releases.outputs.releases }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Find release directories
        id: find-releases
        run: |
          if [ -n "${{ github.event.inputs.release_filter }}" ]; then
            # If a specific release is requested, only scan that one
            if [ -d "releases/${{ github.event.inputs.release_filter }}" ]; then
              releases='["${{ github.event.inputs.release_filter }}"]'
            else
              echo "::error::Release ${{ github.event.inputs.release_filter }} not found"
              exit 1
            fi
          else
            # Find all release directories
            releases=$(find releases -maxdepth 1 -type d -name "nch-*" | sed 's|releases/||' | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "releases=$releases" >> $GITHUB_OUTPUT
          echo "Found releases: $releases"

  vulnerability-scan:
    runs-on: ubuntu-latest
    needs: discover-releases
    if: needs.discover-releases.outputs.releases != '[]'
    strategy:
      matrix:
        release: ${{ fromJson(needs.discover-releases.outputs.releases) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype version
          
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Read release information
        id: release-info
        run: |
          release_dir="releases/${{ matrix.release }}"
          
          if [ ! -f "$release_dir/current-tag" ]; then
            echo "::error::current-tag file not found for release ${{ matrix.release }}"
            exit 1
          fi
          
          if [ ! -f "$release_dir/images" ]; then
            echo "::error::images file not found for release ${{ matrix.release }}"
            exit 1
          fi
          
          tag=$(cat "$release_dir/current-tag")
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "Release ${{ matrix.release }} tag: $tag"
          
          # Count images for matrix info
          image_count=$(wc -l < "$release_dir/images")
          echo "image_count=$image_count" >> $GITHUB_OUTPUT
          echo "Found $image_count images to scan"
          
      - name: Create scan results directory
        run: |
          mkdir -p scan-results/${{ matrix.release }}
          
      - name: Scan images with Grype
        run: |
          release_dir="releases/${{ matrix.release }}"
          tag="${{ steps.release-info.outputs.tag }}"
          results_dir="scan-results/${{ matrix.release }}"
          
          echo "Starting vulnerability scan for release ${{ matrix.release }} (tag: $tag)"
          echo "========================================================"
          
          # Initialize summary files
          echo "# Vulnerability Scan Results for ${{ matrix.release }} (${tag})" > "$results_dir/summary.md"
          echo "" >> "$results_dir/summary.md"
          echo "| Image | Critical | High | Medium | Low | Report |" >> "$results_dir/summary.md"
          echo "|-------|----------|------|--------|-----|--------|" >> "$results_dir/summary.md"
          
          overall_exit_code=0
          
          # Read and scan each image
          while IFS= read -r image_base; do
            # Skip empty lines and comments
            [[ -z "$image_base" || "$image_base" =~ ^[[:space:]]*# ]] && continue
            
            # Construct full image name with tag
            full_image="${image_base}:${tag}"
            
            # Sanitize image name for filename (replace / and : with -)
            safe_name=$(echo "$image_base" | sed 's|[/:]|-|g')
            
            echo ""
            echo "Scanning: $full_image"
            echo "----------------------------------------"
            
            # Run Grype scan
            if grype "$full_image" \
              --output cyclonedx-json \
              --file "$results_dir/${safe_name}.json" \
              --output table \
              --file "$results_dir/${safe_name}.txt"; then
              
              echo "✅ Successfully scanned: $full_image"
              
              # Extract vulnerability counts from JSON for summary
              if [ -f "$results_dir/${safe_name}.json" ]; then
                critical=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' "$results_dir/${safe_name}.json" 2>/dev/null || echo "0")
                high=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' "$results_dir/${safe_name}.json" 2>/dev/null || echo "0")
                medium=$(jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length' "$results_dir/${safe_name}.json" 2>/dev/null || echo "0")
                low=$(jq '[.matches[] | select(.vulnerability.severity == "Low")] | length' "$results_dir/${safe_name}.json" 2>/dev/null || echo "0")
                
                # Add to summary table
                echo "| \`$image_base\` | $critical | $high | $medium | $low | [JSON](./${safe_name}.json) / [TXT](./${safe_name}.txt) |" >> "$results_dir/summary.md"
                
                # Set exit code to 1 if critical or high vulnerabilities found
                if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
                  overall_exit_code=1
                  echo "⚠️  High or critical vulnerabilities found in $full_image"
                fi
              else
                echo "| \`$image_base\` | ERROR | ERROR | ERROR | ERROR | Scan failed |" >> "$results_dir/summary.md"
                overall_exit_code=1
              fi
            else
              echo "❌ Failed to scan: $full_image"
              echo "| \`$image_base\` | ERROR | ERROR | ERROR | ERROR | Scan failed |" >> "$results_dir/summary.md"
              overall_exit_code=1
            fi
            
          done < "$release_dir/images"
          
          echo ""
          echo "========================================================"
          echo "Scan completed for release ${{ matrix.release }}"
          
          # Add scan metadata to summary
          echo "" >> "$results_dir/summary.md"
          echo "## Scan Information" >> "$results_dir/summary.md"
          echo "- **Release**: ${{ matrix.release }}" >> "$results_dir/summary.md"
          echo "- **Tag**: ${tag}" >> "$results_dir/summary.md"
          echo "- **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$results_dir/summary.md"
          echo "- **Grype Version**: $(grype version 2>/dev/null | head -n1 || echo 'Unknown')" >> "$results_dir/summary.md"
          echo "- **Workflow**: ${{ github.workflow }}" >> "$results_dir/summary.md"
          echo "- **Run ID**: ${{ github.run_id }}" >> "$results_dir/summary.md"
          
          # Output the summary
          echo ""
          echo "Summary for ${{ matrix.release }}:"
          cat "$results_dir/summary.md"
          
          # Set job output for later steps
          echo "exit_code=$overall_exit_code" >> $GITHUB_OUTPUT
          
        id: scan
        

      - name: Generate consolidated Grype outputs
        run: |
          release_dir="releases/${{ matrix.release }}"
          tag="${{ steps.release-info.outputs.tag }}"
          results_dir="scan-results/${{ matrix.release }}"
          
          echo "Generating consolidated Grype outputs for release ${{ matrix.release }}"
          
          # Initialize the consolidated CycloneDX structure
          echo '{' > "$release_dir/scan-results-grype.json"
          echo '  "bomFormat": "CycloneDX",' >> "$release_dir/scan-results-grype.json"
          echo '  "specVersion": "1.4",' >> "$release_dir/scan-results-grype.json"
          echo '  "serialNumber": "urn:uuid:'$(uuidgen)'",' >> "$release_dir/scan-results-grype.json"
          echo '  "version": 1,' >> "$release_dir/scan-results-grype.json"
          echo '  "metadata": {' >> "$release_dir/scan-results-grype.json"
          echo '    "timestamp": "'$(date -u '+%Y-%m-%dT%H:%M:%SZ')'",' >> "$release_dir/scan-results-grype.json"
          echo '    "tools": [' >> "$release_dir/scan-results-grype.json"
          echo '      {' >> "$release_dir/scan-results-grype.json"
          echo '        "vendor": "Anchore",' >> "$release_dir/scan-results-grype.json"
          echo '        "name": "grype",' >> "$release_dir/scan-results-grype.json"
          echo '        "version": "'$(grype version 2>/dev/null | head -n1 | cut -d' ' -f2 || echo 'Unknown')'"' >> "$release_dir/scan-results-grype.json"
          echo '      }' >> "$release_dir/scan-results-grype.json"
          echo '    ],' >> "$release_dir/scan-results-grype.json"
          echo '    "component": {' >> "$release_dir/scan-results-grype.json"
          echo '      "type": "container",' >> "$release_dir/scan-results-grype.json"
          echo '      "name": "${{ matrix.release }}",' >> "$release_dir/scan-results-grype.json"
          echo '      "version": "'${tag}'"' >> "$release_dir/scan-results-grype.json"
          echo '    },' >> "$release_dir/scan-results-grype.json"
          echo '    "properties": [' >> "$release_dir/scan-results-grype.json"
          echo '      {' >> "$release_dir/scan-results-grype.json"
          echo '        "name": "workflow_run_id",' >> "$release_dir/scan-results-grype.json"
          echo '        "value": "${{ github.run_id }}"' >> "$release_dir/scan-results-grype.json"
          echo '      },' >> "$release_dir/scan-results-grype.json"
          echo '      {' >> "$release_dir/scan-results-grype.json"
          echo '        "name": "release",' >> "$release_dir/scan-results-grype.json"
          echo '        "value": "${{ matrix.release }}"' >> "$release_dir/scan-results-grype.json"
          echo '      }' >> "$release_dir/scan-results-grype.json"
          echo '    ]' >> "$release_dir/scan-results-grype.json"
          echo '  },' >> "$release_dir/scan-results-grype.json"
          echo '  "components": [],' >> "$release_dir/scan-results-grype.json"
          echo '  "vulnerabilities": []' >> "$release_dir/scan-results-grype.json"
          echo '}' >> "$release_dir/scan-results-grype.json"
          
          # Initialize the markdown report
          # Initialize the markdown report
          echo '# Grype Vulnerability Scan Results' > "$release_dir/scan-results-grype.md"
          echo '' >> "$release_dir/scan-results-grype.md"
          echo '**Release:** ${{ matrix.release }}' >> "$release_dir/scan-results-grype.md"
          echo '**Tag:** '${tag} >> "$release_dir/scan-results-grype.md"
          echo '**Scan Date:** '$(date -u '+%Y-%m-%d %H:%M:%S UTC') >> "$release_dir/scan-results-grype.md"
          echo '**Grype Version:** '$(grype version 2>/dev/null | head -n1 || echo 'Unknown') >> "$release_dir/scan-results-grype.md"
          echo '**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})' >> "$release_dir/scan-results-grype.md"
          echo '' >> "$release_dir/scan-results-grype.md"
          echo '---' >> "$release_dir/scan-results-grype.md"
          echo '' >> "$release_dir/scan-results-grype.md"
          
          # Process each image and add to both JSON and markdown
          while IFS= read -r image_base; do
            # Skip empty lines and comments
            [[ -z "$image_base" || "$image_base" =~ ^[[:space:]]*# ]] && continue
            
            # Sanitize image name for filename
            safe_name=$(echo "$image_base" | sed 's|[/:]|-|g')
            full_image="${image_base}:${tag}"
            
            echo "Processing: $full_image"
            
            # Add to markdown
            echo "## Image: \`$full_image\`" >> "$release_dir/scan-results-grype.md"
            echo "" >> "$release_dir/scan-results-grype.md"
            
            # Check if scan was successful and include results
            if [ -f "$results_dir/${safe_name}.json" ]; then
              # Extract vulnerability counts from CycloneDX format
              critical=$(jq '[.vulnerabilities[]? | select(.ratings[]?.severity == "critical")] | length' "$results_dir/${safe_name}.json" 2>/dev/null || echo "0")
              high=$(jq '[.vulnerabilities[]? | select(.ratings[]?.severity == "high")] | length' "$results_dir/${safe_name}.json" 2>/dev/null || echo "0")
              medium=$(jq '[.vulnerabilities[]? | select(.ratings[]?.severity == "medium")] | length' "$results_dir/${safe_name}.json" 2>/dev/null || echo "0")
              low=$(jq '[.vulnerabilities[]? | select(.ratings[]?.severity == "low")] | length' "$results_dir/${safe_name}.json" 2>/dev/null || echo "0")
              
              # Add vulnerability summary to markdown
              echo "**Scan Status:** ✅ Success" >> "$release_dir/scan-results-grype.md"
              echo "" >> "$release_dir/scan-results-grype.md"
              echo "| Severity | Count |" >> "$release_dir/scan-results-grype.md"
              echo "|----------|-------|" >> "$release_dir/scan-results-grype.md"
              echo "| Critical | $critical |" >> "$release_dir/scan-results-grype.md"
              echo "| High | $high |" >> "$release_dir/scan-results-grype.md"
              echo "| Medium | $medium |" >> "$release_dir/scan-results-grype.md"
              echo "| Low | $low |" >> "$release_dir/scan-results-grype.md"
              echo "" >> "$release_dir/scan-results-grype.md"
              
              # Add detailed text results to markdown if available
              if [ -f "$results_dir/${safe_name}.txt" ]; then
                echo "### Detailed Vulnerability Report" >> "$release_dir/scan-results-grype.md"
                echo "" >> "$release_dir/scan-results-grype.md"
                echo "\`\`\`" >> "$release_dir/scan-results-grype.md"
                cat "$results_dir/${safe_name}.txt" >> "$release_dir/scan-results-grype.md"
                echo "\`\`\`" >> "$release_dir/scan-results-grype.md"
              fi
              
              # Merge CycloneDX components and vulnerabilities into consolidated file
              echo "Merging CycloneDX results for $full_image"
              
              # Extract and merge components
              if jq -e '.components[]?' "$results_dir/${safe_name}.json" > /dev/null 2>&1; then
                jq '.components[]' "$results_dir/${safe_name}.json" | while IFS= read -r component; do
                  # Add image reference to component
                  enhanced_component=$(echo "$component" | jq ". + {"properties": [{"name": "image", "value": "$full_image"}]}")
                  
                  # Append to consolidated file (we'll fix the JSON structure later)
                  echo "COMPONENT: $enhanced_component" >> "$release_dir/temp_components.jsonl"
                done
              fi
              
              # Extract and merge vulnerabilities  
              if jq -e '.vulnerabilities[]?' "$results_dir/${safe_name}.json" > /dev/null 2>&1; then
                jq '.vulnerabilities[]' "$results_dir/${safe_name}.json" | while IFS= read -r vulnerability; do
                  # Add image reference to vulnerability
                  enhanced_vuln=$(echo "$vulnerability" | jq ". + {"properties": [{"name": "image", "value": "$full_image"}]}")
                  
                  # Append to consolidated file (we'll fix the JSON structure later)
                  echo "VULNERABILITY: $enhanced_vuln" >> "$release_dir/temp_vulnerabilities.jsonl"
                done
              fi
              
            else
              # Add failure to markdown
              echo "**Scan Status:** ❌ Failed" >> "$release_dir/scan-results-grype.md"
              echo "" >> "$release_dir/scan-results-grype.md"
              echo "The vulnerability scan failed for this image. Please check the workflow logs for more details." >> "$release_dir/scan-results-grype.md"
            fi
            echo "" >> "$release_dir/scan-results-grype.md"
            echo "---" >> "$release_dir/scan-results-grype.md"
            echo "" >> "$release_dir/scan-results-grype.md"
            
          done < "$release_dir/images"
          
          # Finalize CycloneDX JSON structure
          echo "Finalizing CycloneDX JSON structure..."
          
          # Merge all components and vulnerabilities into the main file
          if [ -f "$release_dir/temp_components.jsonl" ]; then
            echo "Merging components..."
            components_json=$(grep "^COMPONENT:" "$release_dir/temp_components.jsonl" | sed 's/^COMPONENT: //' | jq -s '.')
            jq ".components = $components_json" "$release_dir/scan-results-grype.json" > "$release_dir/scan-results-grype.json.tmp"
            mv "$release_dir/scan-results-grype.json.tmp" "$release_dir/scan-results-grype.json"
            rm -f "$release_dir/temp_components.jsonl"
          fi
          
          if [ -f "$release_dir/temp_vulnerabilities.jsonl" ]; then
            echo "Merging vulnerabilities..."
            vulnerabilities_json=$(grep "^VULNERABILITY:" "$release_dir/temp_vulnerabilities.jsonl" | sed 's/^VULNERABILITY: //' | jq -s '.')
            jq ".vulnerabilities = $vulnerabilities_json" "$release_dir/scan-results-grype.json" > "$release_dir/scan-results-grype.json.tmp"
            mv "$release_dir/scan-results-grype.json.tmp" "$release_dir/scan-results-grype.json"
            rm -f "$release_dir/temp_vulnerabilities.jsonl"
          fi
          
          echo "✅ Generated consolidated CycloneDX JSON: $release_dir/scan-results-grype.json"
          echo "✅ Generated markdown report: $release_dir/scan-results-grype.md"
          
          # Validate JSON syntax
          if jq . "$release_dir/scan-results-grype.json" > /dev/null 2>&1; then
            echo "✅ CycloneDX JSON validation successful"
          else
            echo "❌ CycloneDX JSON validation failed"
            echo "JSON content preview:"
            head -20 "$release_dir/scan-results-grype.json"
            exit 1
          fi
          
      - name: Commit scan results to release folder
        run: |
          release_dir="releases/${{ matrix.release }}"
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if there are changes to commit
          if git diff --quiet "$release_dir/scan-results.json" 2>/dev/null; then
            echo "No changes to scan-results.json, skipping commit"
          else
            # Add and commit the scan results
            git add "$release_dir/scan-results-grype.json" "$release_dir/scan-results-grype.md"
            git commit -m "Update Grype vulnerability scan results for ${{ matrix.release }}

- Scan Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
- Tag: ${{ steps.release-info.outputs.tag }}
- Workflow Run: ${{ github.run_id }}
- Images Scanned: ${{ steps.release-info.outputs.image_count }}

Automated commit from vulnerability scan workflow."
            
            echo "✅ Committed scan results for ${{ matrix.release }}"
          fi

          

      - name: Push scan results to repository
        run: |
          # Check if there are any commits to push
          if git log --oneline origin/main..HEAD | grep -q "Update vulnerability scan results"; then
            echo "Pushing scan results to repository..."
            git push origin main
            echo "✅ Successfully pushed scan results for ${{ matrix.release }}"
          else
            echo "No scan result commits to push"
          fi

          
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-scan-${{ matrix.release }}
          path: scan-results/${{ matrix.release }}/
          retention-days: 30
          
      - name: Check for critical vulnerabilities
        if: steps.scan.outputs.exit_code == '1'
        run: |
          echo "::warning::Critical or high severity vulnerabilities found in release ${{ matrix.release }}"
          echo "Please review the scan results and take appropriate action."
          # Don't fail the job, just warn - you can change this behavior if needed
          # exit 1

  summary:
    runs-on: ubuntu-latest
    needs: [discover-releases, vulnerability-scan]
    if: always() && needs.discover-releases.outputs.releases != '[]'
    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: all-scan-results/
          pattern: vulnerability-scan-*
          
      - name: Generate overall summary
        run: |
          echo "# Overall Vulnerability Scan Summary" > overall-summary.md
          echo "" >> overall-summary.md
          echo "**Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> overall-summary.md
          echo "**Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> overall-summary.md
          echo "" >> overall-summary.md
          
          # Find all summary files
          find all-scan-results -name "summary.md" | while read -r summary_file; do
            release_name=$(echo "$summary_file" | sed 's|all-scan-results/vulnerability-scan-||' | sed 's|/summary.md||')
            echo "## Release: $release_name" >> overall-summary.md
            echo "" >> overall-summary.md
            # Skip the first line (title) of each summary
            tail -n +2 "$summary_file" >> overall-summary.md
            echo "" >> overall-summary.md
          done
          
          echo "Generated overall summary:"
          cat overall-summary.md
          
      - name: Upload overall summary
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-summary
          path: overall-summary.md
          retention-days: 30
