name: CVE Scan

on:
  schedule:
    # Run at 2:00 AM PST (10:00 AM UTC during standard time, 9:00 AM UTC during daylight time)
    # Using 10:00 AM UTC to cover PST standard time
    - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      release_filter:
        description: 'Specific release to scan (e.g., nch-4.22.11). Leave empty to scan all releases.'
        required: false
        type: string

# Add permissions for accessing packages and writing to repository
permissions:
  contents: write          # For committing scan results
  packages: read           # For accessing private packages in GHCR
  actions: read            # For workflow execution
  id-token: write          # For OIDC token if needed

jobs:
  discover-releases:
    runs-on: ubuntu-latest
    outputs:
      releases: ${{ steps.find-releases.outputs.releases }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Find release directories
        id: find-releases
        run: |
          if [ -n "${{ github.event.inputs.release_filter }}" ]; then
            # If a specific release is requested, only scan that one
            if [ -d "cve-management/releases/${{ github.event.inputs.release_filter }}" ]; then
              releases='["${{ github.event.inputs.release_filter }}"]'
            else
              echo "::error::Release ${{ github.event.inputs.release_filter }} not found"
              exit 1
            fi
          else
            # Find all release directories
            releases=$(find cve-management/releases -maxdepth 1 -type d -name "nch-*" | sed 's|cve-management/releases/||' | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "releases=$releases" >> $GITHUB_OUTPUT
          echo "Found releases: $releases"

  cve-scan:
    runs-on: ubuntu-latest
    needs: discover-releases
    if: needs.discover-releases.outputs.releases != '[]'
    strategy:
      matrix:
        release: ${{ fromJson(needs.discover-releases.outputs.releases) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # The username can still be the github.actor
          username: ${{ github.actor }}
          # Use the organization-level secret for the password
          password: ${{ secrets.DEPLOYMENT_PAT }}
          
      - name: Install Grype
        run: |
          echo "Installing Grype vulnerability scanner..."
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype version
          
      - name: Verify Docker authentication
        run: |
          echo "Verifying Docker authentication to ghcr.io..."
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Release: ${{ matrix.release }}"
          
          # Test authentication
          echo "Testing GHCR access..."
          if docker manifest inspect ghcr.io/nirmata/users:latest > /dev/null 2>&1; then
            echo "✅ Authentication test successful"
          else
            echo "⚠️ Authentication test failed for latest tag, proceeding with release-specific images"
          fi
          
      - name: Read release images
        id: release-info
        run: |
          release_dir="cve-management/releases/${{ matrix.release }}"
          images_file="$release_dir/images.txt"
          
          if [ ! -f "$images_file" ]; then
            echo "::error::images.txt file not found for release ${{ matrix.release }}"
            exit 1
          fi
          
          # Count images
          image_count=$(wc -l < "$images_file")
          echo "image_count=$image_count" >> $GITHUB_OUTPUT
          echo "Found $image_count images to scan for release ${{ matrix.release }}"
          
          # Display images
          echo "Images to scan:"
          cat "$images_file"
          
      - name: Create scan results directory
        run: |
          mkdir -p cve-management/releases/${{ matrix.release }}/scan-results
          
      - name: Pull images and scan with Grype
        run: |
          release_dir="cve-management/releases/${{ matrix.release }}"
          images_file="$release_dir/images.txt"
          results_dir="$release_dir/scan-results"
          
          echo "Starting Grype vulnerability scan for release ${{ matrix.release }}"
          echo "========================================================"
          
          # Initialize summary
          echo "# Vulnerability Scan Results for ${{ matrix.release }}" > "$results_dir/summary.md"
          echo "" >> "$results_dir/summary.md"
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$results_dir/summary.md"
          echo "**Release:** ${{ matrix.release }}" >> "$results_dir/summary.md"
          echo "**Scanner:** Grype vulnerability scanner" >> "$results_dir/summary.md"
          echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "$results_dir/summary.md"
          echo "" >> "$results_dir/summary.md"
          echo "| Image | Status | Vulnerabilities | VEX Report | Markdown Report |" >> "$results_dir/summary.md"
          echo "|-------|--------|----------------|------------|-----------------|" >> "$results_dir/summary.md"
          
          overall_success=true
          
          # Process each image
          while IFS= read -r full_image; do
            # Skip empty lines and comments
            [[ -z "$full_image" || "$full_image" =~ ^[[:space:]]*# ]] && continue
            
            # Sanitize image name for filename (replace / and : with -)
            safe_name=$(echo "$full_image" | sed 's|[/:]|-|g')
            
            echo ""
            echo "Processing: $full_image"
            echo "----------------------------------------"
            
            # Check if image exists and is accessible
            echo "Checking image accessibility: $full_image"
            max_retries=3
            retry_count=0
            image_accessible=false
            
            while [ $retry_count -lt $max_retries ] && [ "$image_accessible" = false ]; do
              if docker manifest inspect "$full_image" >/dev/null 2>&1; then
                image_accessible=true
                echo "✅ Image $full_image is accessible"
              else
                retry_count=$((retry_count + 1))
                echo "⚠️ Image $full_image not accessible (attempt $retry_count/$max_retries)"
                [ $retry_count -lt $max_retries ] && sleep 2
              fi
            done
            
            if [ "$image_accessible" = true ]; then
              # Scan with Grype - VEX format
              echo "Scanning with Grype (VEX format): $full_image"
              if grype "$full_image" \
                --output vex \
                --file "$results_dir/${safe_name}.vex" \
                --output table \
                --file "$results_dir/${safe_name}-table.txt"; then
                
                echo "✅ Successfully scanned (VEX): $full_image"
                
                # Also generate CycloneDX format for better tooling compatibility
                echo "Generating CycloneDX format: $full_image"
                grype "$full_image" \
                  --output cyclonedx-json \
                  --file "$results_dir/${safe_name}-cyclonedx.json" || echo "⚠️ CycloneDX generation failed"
                
                # Count vulnerabilities from table output
                if [ -f "$results_dir/${safe_name}-table.txt" ]; then
                  vuln_count=$(grep -c "^[^[:space:]]" "$results_dir/${safe_name}-table.txt" 2>/dev/null || echo "0")
                  # Subtract header lines (typically 2-3 lines)
                  vuln_count=$((vuln_count > 3 ? vuln_count - 3 : 0))
                else
                  vuln_count="unknown"
                fi
                
                # Generate human-readable Markdown report
                echo "# Vulnerability Scan Report for $full_image" > "$results_dir/${safe_name}-report.md"
                echo "" >> "$results_dir/${safe_name}-report.md"
                echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$results_dir/${safe_name}-report.md"
                echo "**Scanner:** Grype" >> "$results_dir/${safe_name}-report.md"
                echo "**Image:** \`$full_image\`" >> "$results_dir/${safe_name}-report.md"
                echo "**Vulnerabilities Found:** $vuln_count" >> "$results_dir/${safe_name}-report.md"
                echo "" >> "$results_dir/${safe_name}-report.md"
                
                # Add vulnerability table if available
                if [ -f "$results_dir/${safe_name}-table.txt" ] && [ -s "$results_dir/${safe_name}-table.txt" ]; then
                  echo "## Vulnerability Details" >> "$results_dir/${safe_name}-report.md"
                  echo "" >> "$results_dir/${safe_name}-report.md"
                  echo "\`\`\`" >> "$results_dir/${safe_name}-report.md"
                  cat "$results_dir/${safe_name}-table.txt" >> "$results_dir/${safe_name}-report.md"
                  echo "\`\`\`" >> "$results_dir/${safe_name}-report.md"
                  echo "" >> "$results_dir/${safe_name}-report.md"
                fi
                
                # Add links to other formats
                echo "## Additional Reports" >> "$results_dir/${safe_name}-report.md"
                echo "- [VEX Format](./${safe_name}.vex)" >> "$results_dir/${safe_name}-report.md"
                echo "- [CycloneDX JSON](./${safe_name}-cyclonedx.json)" >> "$results_dir/${safe_name}-report.md"
                echo "- [Table Format](./${safe_name}-table.txt)" >> "$results_dir/${safe_name}-report.md"
                
                # Add to summary table
                vuln_display="$vuln_count vulnerabilities"
                [ "$vuln_count" = "0" ] && vuln_display="✅ No vulnerabilities"
                [ "$vuln_count" = "unknown" ] && vuln_display="❓ Count unknown"
                
                echo "| \`$full_image\` | ✅ Success | $vuln_display | [VEX](./${safe_name}.vex) | [Report](./${safe_name}-report.md) |" >> "$results_dir/summary.md"
                
              else
                echo "❌ Failed to scan: $full_image"
                echo "| \`$full_image\` | ❌ Scan Failed | Error during scan | - | - |" >> "$results_dir/summary.md"
                overall_success=false
              fi
              
            else
              echo "❌ Cannot access image: $full_image"
              echo "| \`$full_image\` | ❌ Access Failed | Image not accessible | - | - |" >> "$results_dir/summary.md"
              overall_success=false
            fi
            
          done < "$images_file"
          
          echo ""
          echo "========================================================"
          echo "Grype vulnerability scan completed for release ${{ matrix.release }}"
          
          # Add scan metadata to summary
          echo "" >> "$results_dir/summary.md"
          echo "## Scan Information" >> "$results_dir/summary.md"
          echo "- **Total Images**: ${{ steps.release-info.outputs.image_count }}" >> "$results_dir/summary.md"
          echo "- **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$results_dir/summary.md"
          echo "- **Workflow**: ${{ github.workflow }}" >> "$results_dir/summary.md"
          echo "- **Run ID**: ${{ github.run_id }}" >> "$results_dir/summary.md"
          echo "- **Overall Status**: $([ "$overall_success" = true ] && echo "✅ All images processed successfully" || echo "⚠️ Some images had issues")" >> "$results_dir/summary.md"
          
          # Output the summary
          echo ""
          echo "Summary for ${{ matrix.release }}:"
          cat "$results_dir/summary.md"
          
      - name: Commit scan results to release folder
        run: |
          release_dir="cve-management/releases/${{ matrix.release }}"
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if files exist and have content
          if [ -d "$release_dir/scan-results" ] && [ "$(ls -A $release_dir/scan-results)" ]; then
            echo "Scan result files generated, proceeding with commit"
            # Add and commit the scan results
            git add "$release_dir/scan-results/"
            git commit -m "Update vulnerability scan results for ${{ matrix.release }} - Grype scan: $(date -u '+%Y-%m-%d %H:%M:%S UTC') - Run: ${{ github.run_id }}"
            
            echo "✅ Committed scan results for ${{ matrix.release }}"
          else
            echo "❌ Scan result files not found or empty, skipping commit"
            echo "Expected directory: $release_dir/scan-results/"
            ls -la "$release_dir/" || echo "Release directory not found"
          fi
          
      - name: Push scan results to repository
        run: |
          # Check if there are any commits to push
          if git log --oneline origin/main..HEAD | grep -q "Update vulnerability scan results"; then
            echo "Pushing scan results to repository..."
            
            # Retry push with pull/rebase in case of concurrent pushes
            max_retries=5
            retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              if git push origin main; then
                echo "✅ Successfully pushed scan results for ${{ matrix.release }} (attempt $((retry_count + 1)))"
                break
              else
                retry_count=$((retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                  echo "⚠️ Push failed, attempting to pull and rebase (attempt $retry_count/$max_retries)..."
                  
                  # Pull with rebase to integrate remote changes
                  if git pull --rebase origin main; then
                    echo "✅ Successfully rebased with remote changes"
                    # Add a small random delay to reduce race conditions
                    sleep $((RANDOM % 10 + 1))
                  else
                    echo "❌ Failed to rebase with remote changes"
                    break
                  fi
                else
                  echo "❌ Failed to push after $max_retries attempts for ${{ matrix.release }}"
                  echo "This is likely due to concurrent job conflicts, but scan results are still generated as artifacts"
                  exit 1
                fi
              fi
            done
          else
            echo "No CVE scan result commits to push"
          fi
          
      - name: Upload scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-scan-${{ matrix.release }}
          path: cve-management/releases/${{ matrix.release }}/scan-results/
          retention-days: 30

  summary:
    runs-on: ubuntu-latest
    needs: [discover-releases, cve-scan]
    if: always() && needs.discover-releases.outputs.releases != '[]'
    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: all-scan-results/
          pattern: vulnerability-scan-*
          
      - name: Generate overall summary
        run: |
          echo "# Overall Vulnerability Scan Summary" > overall-summary.md
          echo "" >> overall-summary.md
          echo "**Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> overall-summary.md
          echo "**Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> overall-summary.md
          echo "" >> overall-summary.md
          
          # Find all summary files
          find all-scan-results -name "summary.md" | while read -r summary_file; do
            release_name=$(echo "$summary_file" | sed 's|all-scan-results/vulnerability-scan-||' | sed 's|/summary.md||')
            echo "## Release: $release_name" >> overall-summary.md
            echo "" >> overall-summary.md
            # Skip the first line (title) of each summary
            tail -n +2 "$summary_file" >> overall-summary.md
            echo "" >> overall-summary.md
          done
          
          echo "Generated overall summary:"
          cat overall-summary.md
          
      - name: Upload overall summary
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-summary
          path: overall-summary.md
          retention-days: 30
