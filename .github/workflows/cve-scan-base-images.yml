name: CVE Scan - Base Images

on:
  schedule:
    # Run at 3:00 AM PST (11:00 AM UTC during standard time, 10:00 AM UTC during daylight time)
    # Using 11:00 AM UTC to cover PST standard time, offset from releases scan
    - cron: '0 11 * * *'
  workflow_dispatch:
    inputs:
      image_filter:
        description: 'Specific base image to scan (e.g., ghcr.io/nirmata/wolfi-openjdk-21-jre:0.24). Leave empty to scan all base images.'
        required: false
        type: string

# Add permissions for accessing packages and writing to repository
permissions:
  contents: write          # For committing scan results
  packages: read           # For accessing private packages in GHCR
  actions: read            # For workflow execution
  id-token: write          # For OIDC token if needed

jobs:
  cve-scan-base-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype version
          
      - name: Create scan results directory
        run: |
          mkdir -p cve-management/base-images/scan-results
          
      - name: Create SLA analysis script
        run: |
          cat > sla-analysis.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          results_dir="$1"
          scan_type="$2"
          run_id="$3"
          
          echo "========================================================"
          echo "Generating SLA Report for $scan_type"
          echo "========================================================"
          
          # Load SLA configuration
          sla_config_file="cve-management/sla.config"
          if [ ! -f "$sla_config_file" ]; then
            echo "⚠️ SLA configuration file not found: $sla_config_file"
            exit 0
          fi
          
          echo "📋 Loading SLA configuration from $sla_config_file"
          
          # Base images don't have customer lists, so set empty array
          customers_json="[]"
          
          # Create SLA report
          sla_report_file="$results_dir/sla-compliance-report-grype.json"
          
          # Initialize SLA report structure with customers
          cat > "$sla_report_file" << EOJ
          {
            "slaInfo": {
              "reportDate": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
              "scanType": "$scan_type",
              "workflowRun": "$run_id",
              "impactedCustomers": $customers_json
            },
            "blackList": [],
            "redList": [],
            "orangeList": [],
            "yellowList": []
          }
          EOJ
          
          # Parse scan results and categorize CVEs
          if [ ! -f "$results_dir/scan-grype.json" ]; then
            echo "⚠️ No scan results found, skipping SLA report generation"
            exit 0
          fi
          
          echo "🔍 Analyzing vulnerabilities for SLA compliance..."
          
          # Create temporary files for each category
          black_temp=$(mktemp)
          red_temp=$(mktemp)
          orange_temp=$(mktemp)
          yellow_temp=$(mktemp)
          
          current_date=$(date +%s)
          
          # Process each image in the scan results
          jq -c '.images[]' "$results_dir/scan-grype.json" | while read -r image_data; do
            image_name=$(echo "$image_data" | jq -r '.image')
            echo "  Analyzing image: $image_name"
            
            # Process each vulnerability in the image
            echo "$image_data" | jq -c '.scan.vulnerabilities[]?' | while read -r vuln; do
              vuln_id=$(echo "$vuln" | jq -r '.vulnerability')
              severity=$(echo "$vuln" | jq -r '.severity')
              fixed_in=$(echo "$vuln" | jq -r '.fixed_in')
              published_date=$(echo "$vuln" | jq -r '.published_date')
              
              # Only process CVEs and GHSAs with fixes available for SLA tracking
              if [[ "$vuln_id" == CVE-* || "$vuln_id" == GHSA-* ]] && [ "$fixed_in" != "" ] && [ "$fixed_in" != "null" ]; then
                echo "    Processing: $vuln_id ($severity) - Fix: $fixed_in - Published: $published_date"
                
                # Get SLA days for this severity (convert to lowercase)
                severity_lower=$(echo "$severity" | tr '[:upper:]' '[:lower:]')
                sla_days=$(grep -i "^${severity_lower}," "$sla_config_file" | cut -d',' -f2 || echo "")
                
                if [ -n "$sla_days" ] && [ "$published_date" != "N/A" ] && [[ "$published_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                  # Calculate days since publication (cross-platform compatible)
                  if date -d "$published_date" +%s >/dev/null 2>&1; then
                    # GNU date (Linux)
                    published_epoch=$(date -d "$published_date" +%s)
                  else
                    # BSD date (macOS)
                    published_epoch=$(date -j -f "%Y-%m-%d" "$published_date" +%s)
                  fi
                  
                  days_elapsed=$(( (current_date - published_epoch) / 86400 ))
                  days_remaining=$(( sla_days - days_elapsed ))
                  
                  echo "      SLA: $sla_days days, Elapsed: $days_elapsed days, Remaining: $days_remaining days"
                  
                  # Create vulnerability entry
                  vuln_entry=$(jq -n \
                    --arg vuln_id "$vuln_id" \
                    --arg severity "$severity" \
                    --arg published_date "$published_date" \
                    --arg fixed_in "$fixed_in" \
                    --arg image "$image_name" \
                    --argjson days_elapsed "$days_elapsed" \
                    --argjson days_remaining "$days_remaining" \
                    --argjson sla_days "$sla_days" \
                    '{
                      vulnerability: $vuln_id,
                      severity: $severity,
                      publishedDate: $published_date,
                      fixedIn: $fixed_in,
                      daysElapsed: $days_elapsed,
                      daysRemaining: $days_remaining,
                      slaDays: $sla_days,
                      images: [$image]
                    }')
                  
                  # Categorize based on days remaining
                  if [ "$days_remaining" -lt 0 ]; then
                    echo "$vuln_entry" >> "$black_temp"
                    echo "      → BLACK LIST (SLA exceeded by $((-days_remaining)) days)"
                  elif [ "$days_remaining" -le 7 ]; then
                    echo "$vuln_entry" >> "$red_temp"
                    echo "      → RED LIST ($days_remaining days remaining)"
                  elif [ "$days_remaining" -le 21 ]; then
                    echo "$vuln_entry" >> "$orange_temp"
                    echo "      → ORANGE LIST ($days_remaining days remaining)"
                  else
                    echo "$vuln_entry" >> "$yellow_temp"
                    echo "      → YELLOW LIST ($days_remaining days remaining)"
                  fi
                else
                  if [ -z "$sla_days" ]; then
                    echo "      ⚠️ Skipped: No SLA found for severity '$severity'"
                  elif [ "$published_date" = "N/A" ] || [[ ! "$published_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                    echo "      ⚠️ Skipped: Invalid or unavailable published date '$published_date'"
                  fi
                fi
              else
                # Log vulnerabilities without fixes (included in scan but not SLA tracking)
                if [[ "$vuln_id" == CVE-* || "$vuln_id" == GHSA-* ]] && ([ "$fixed_in" = "" ] || [ "$fixed_in" = "null" ]); then
                  echo "    Found: $vuln_id ($severity) - No fix available (included in scan, excluded from SLA)"
                fi
              fi
            done
          done
          
          echo "✅ SLA analysis complete"
          echo "📊 Generating consolidated SLA report..."
          
          # Consolidate duplicate CVEs across images and rebuild the report
          for category in black red orange yellow; do
            temp_file_var="${category}_temp"
            temp_file="${!temp_file_var}"
            
            if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
              # Group by vulnerability ID and merge images
              consolidated=$(jq -s '
                group_by(.vulnerability) | 
                map({
                  vulnerability: .[0].vulnerability,
                  severity: .[0].severity,
                  publishedDate: .[0].publishedDate,
                  fixedIn: .[0].fixedIn,
                  daysElapsed: .[0].daysElapsed,
                  daysRemaining: .[0].daysRemaining,
                  slaDays: .[0].slaDays,
                  images: (map(.images[]) | unique)
                })
              ' "$temp_file")
              
              # Update the SLA report with this category
              jq --argjson data "$consolidated" ".${category}List = \$data" "$sla_report_file" > "${sla_report_file}.tmp"
              mv "${sla_report_file}.tmp" "$sla_report_file"
            fi
            
            # Cleanup temp file
            rm -f "$temp_file"
          done
          
          echo "✅ SLA report generated: $sla_report_file"
          
          # Display summary
          black_count=$(jq '.blackList | length' "$sla_report_file")
          red_count=$(jq '.redList | length' "$sla_report_file")
          orange_count=$(jq '.orangeList | length' "$sla_report_file")
          yellow_count=$(jq '.yellowList | length' "$sla_report_file")
          
          echo ""
          echo "📊 SLA Report Summary:"
          echo "🔴 BLACK (SLA Exceeded): $black_count CVEs"
          echo "🔴 RED (1-7 days left): $red_count CVEs"
          echo "🟠 ORANGE (8-21 days left): $orange_count CVEs"
          echo "🟡 YELLOW (>21 days left): $yellow_count CVEs"
          
          # Generate markdown report
          echo "📄 Generating SLA markdown report..."
          sla_md_file="$results_dir/sla-compliance-report-grype.md"
          
          # Extract report info
          report_date=$(jq -r '.slaInfo.reportDate' "$sla_report_file")
          workflow_run=$(jq -r '.slaInfo.workflowRun' "$sla_report_file")
          scan_type=$(jq -r '.slaInfo.scanType' "$sla_report_file")
          
          # Create markdown header
          cat > "$sla_md_file" << EOM
          # SLA Compliance Report for $scan_type
          
          **Generated**: $report_date  
          **Scan Type**: $scan_type  
          **Workflow Run**: [$workflow_run](https://github.com/nirmata/nch-release-management/actions/runs/$workflow_run)  
          **Impacted Customers**: N/A (Base Images)
          
          ## Executive Summary
          
          | Priority | Count | Status |
          |----------|--------|---------|
          | ⚫ **BLACK** (Overdue) | $black_count | SLA Exceeded |
          | 🔴 **RED** (Critical) | $red_count | 1-7 days remaining |
          | 🟠 **ORANGE** (Warning) | $orange_count | 8-21 days remaining |
          | 🟡 **YELLOW** (Monitor) | $yellow_count | >21 days remaining |
          | **TOTAL** | $((black_count + red_count + orange_count + yellow_count)) | Vulnerabilities with fixes |
          
          ## Base Images Impact Analysis
          
          **Base Images Scanned**: These are foundational container images used across multiple releases and deployments.
          
          **Business Impact**: Vulnerabilities in base images affect all applications and services built on top of them. Priority should be given to vulnerabilities in the BLACK and RED categories to minimize widespread security exposure.
          
          EOM
          
          # Generate detailed sections for each priority level
          for priority in black red orange yellow; do
            case $priority in
              black) 
                title="⚫ BLACK LIST - SLA Exceeded (IMMEDIATE ACTION REQUIRED)"
                description="These vulnerabilities have exceeded their SLA timeframes and require immediate attention."
                ;;
              red)
                title="🔴 RED LIST - Critical Priority (1-7 days remaining)"
                description="These vulnerabilities are approaching their SLA deadline and need urgent action."
                ;;
              orange)
                title="🟠 ORANGE LIST - Warning Priority (8-21 days remaining)"
                description="These vulnerabilities should be planned for remediation in the near term."
                ;;
              yellow)
                title="🟡 YELLOW LIST - Monitor Priority (>21 days remaining)"
                description="These vulnerabilities are within SLA but should be monitored for planning purposes."
                ;;
            esac
            
            count=$(jq ".${priority}List | length" "$sla_report_file")
            
            echo "" >> "$sla_md_file"
            echo "## $title" >> "$sla_md_file"
            echo "" >> "$sla_md_file"
            echo "$description" >> "$sla_md_file"
            echo "" >> "$sla_md_file"
            
            if [ "$count" -gt 0 ]; then
              echo "**Count**: $count vulnerabilities" >> "$sla_md_file"
              echo "" >> "$sla_md_file"
              echo "| Vulnerability | Severity | Published | Fix Available | Days Elapsed | Days Remaining | SLA | Affected Images |" >> "$sla_md_file"
              echo "|---------------|----------|-----------|---------------|--------------|----------------|-----|-----------------|" >> "$sla_md_file"
              
              # Extract vulnerabilities for this priority level
              jq -r ".${priority}List[] | 
                \"| [\(.vulnerability)](https://nvd.nist.gov/vuln/detail/\(.vulnerability)) | \(.severity) | \(.publishedDate) | \(.fixedIn) | \(.daysElapsed) | \(.daysRemaining) | \(.slaDays) days | \(.images | join(\", \")) |\"" \
                "$sla_report_file" >> "$sla_md_file"
            else
              echo "✅ **No vulnerabilities in this category**" >> "$sla_md_file"
            fi
            echo "" >> "$sla_md_file"
          done
          
          # Add footer with additional information
          cat >> "$sla_md_file" << EOM
          
          ---
          
          ## SLA Policy
          
          | Severity | SLA Timeline | Description |
          |----------|--------------|-------------|
          | Critical | 7 days | Immediate security risk |
          | High | 30 days | Significant security risk |
          | Medium | 60 days | Moderate security risk |
          | Low | 90 days | Minor security risk |
          | Unknown | 90 days | Unclassified severity |
          
          ## Notes
          
          - Only vulnerabilities with available fixes are tracked in SLA reports
          - Days remaining calculation is based on published date + SLA timeline
          - Negative values in "Days Remaining" indicate SLA violations
          - Both CVE and GHSA vulnerabilities are included in tracking
          - Base images affect all downstream applications and services
          
          ## Action Items
          
          1. **BLACK LIST**: Immediate remediation required - SLA already exceeded
          2. **RED LIST**: Urgent action needed within 1-7 days
          3. **ORANGE LIST**: Plan remediation within 8-21 days  
          4. **YELLOW LIST**: Include in next maintenance cycle
          
          *Report generated automatically by the CVE Scan - Base Images workflow*
          EOM
          
          echo "✅ SLA markdown report generated: $sla_md_file"
          EOF
          
          chmod +x sla-analysis.sh
          
      - name: Scan base images with Grype
        run: |
          images_file="cve-management/base-images/images.config"
          results_dir="cve-management/base-images/scan-results"
          
          if [ ! -f "$images_file" ]; then
            echo "::error::images.config file not found for base images"
            exit 1
          fi
          
          echo "Starting Grype vulnerability scan for base images"
          echo "========================================================"
          
          # Initialize consolidated scan report
          echo "# Vulnerability Scan Results for Base Images" > "$results_dir/scan-grype.md"
          echo "" >> "$results_dir/scan-grype.md"
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$results_dir/scan-grype.md"
          echo "**Scan Type:** Base Images" >> "$results_dir/scan-grype.md"
          echo "**Scanner:** Grype vulnerability scanner" >> "$results_dir/scan-grype.md"
          echo "**Workflow Run:** [${{ github.run_id }}](https://github.com/nirmata/nch-release-management/actions/runs/${{ github.run_id }})" >> "$results_dir/scan-grype.md"
          echo "" >> "$results_dir/scan-grype.md"
          
          # Initialize consolidated JSON structure
          echo "{" > "$results_dir/scan-grype.json"
          echo "  \"scanInfo\": {" >> "$results_dir/scan-grype.json"
          echo "    \"scanDate\": \"$(date -u '+%Y-%m-%d %H:%M:%S UTC')\"," >> "$results_dir/scan-grype.json"
          echo "    \"scanType\": \"Base Images\"," >> "$results_dir/scan-grype.json"
          echo "    \"scanner\": \"Grype\"," >> "$results_dir/scan-grype.json"
          echo "    \"workflowRun\": \"${{ github.run_id }}\"" >> "$results_dir/scan-grype.json"
          echo "  }," >> "$results_dir/scan-grype.json"
          echo "  \"images\": [" >> "$results_dir/scan-grype.json"
          
          overall_success=true
          image_count=0
          
          # Add markdown table header
          echo "| Image | Status | Vulnerabilities |" >> "$results_dir/scan-grype.md"
          echo "|-------|--------|----------------|" >> "$results_dir/scan-grype.md"
          
          # Create temporary file for summary table rows
          summary_table_temp=$(mktemp)
          
          # Process each image
          while IFS= read -r full_image; do
            # Skip empty lines and comments
            [[ -z "$full_image" || "$full_image" =~ ^[[:space:]]*# ]] && continue
            
            # Check if specific image filter is provided
            if [ -n "${{ github.event.inputs.image_filter }}" ] && [ "$full_image" != "${{ github.event.inputs.image_filter }}" ]; then
              echo "Skipping $full_image (not matching filter: ${{ github.event.inputs.image_filter }})"
              continue
            fi
            
            # Add comma for JSON array (except for first item)
            [ $image_count -gt 0 ] && echo "," >> "$results_dir/scan-grype.json"
            
            echo ""
            echo "Processing: $full_image"
            echo "----------------------------------------"
            
            # Check if image exists and is accessible
            echo "Checking image accessibility: $full_image"
            max_retries=3
            retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              if docker manifest inspect "$full_image" >/dev/null 2>&1; then
                echo "✅ Image $full_image is accessible"
                break
              else
                retry_count=$((retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                  echo "⚠️ Attempt $retry_count failed, retrying in 10 seconds..."
                  sleep 10
                else
                  echo "❌ Image $full_image is not accessible after $max_retries attempts"
                  overall_success=false
                  
                  # Add failed entry to JSON
                  echo "    {" >> "$results_dir/scan-grype.json"
                  echo "      \"image\": \"$full_image\"," >> "$results_dir/scan-grype.json"
                  echo "      \"status\": \"failed\"," >> "$results_dir/scan-grype.json"
                  echo "      \"error\": \"Image not accessible\"," >> "$results_dir/scan-grype.json"
                  echo "      \"vulnerabilityCount\": 0," >> "$results_dir/scan-grype.json"
                  echo "      \"scan\": {}" >> "$results_dir/scan-grype.json"
                  echo "    }" >> "$results_dir/scan-grype.json"
                  
                  # Add to summary table
                  echo "| $full_image | ❌ Failed | Image not accessible |" >> "$summary_table_temp"
                  
                  image_count=$((image_count + 1))
                  continue 2
                fi
              fi
            done
            
            echo "Scanning with Grype (Table and JSON formats): $full_image"
            
            # Create temporary files for this scan
            temp_template=$(mktemp)
            temp_json=$(mktemp)
            
            # Create custom Grype template for extracting data
            echo 'NAME,INSTALLED,FIXED_IN,TYPE,VULNERABILITY,SEVERITY,EPSS_RAW,RISK,PUBLISHED_DATE' > grype-custom.tmpl
            echo '{{- range .Matches }}' >> grype-custom.tmpl
            echo '"{{.Artifact.Name}}","{{.Artifact.Version}}","{{- if .Vulnerability.Fix.Versions }}{{index .Vulnerability.Fix.Versions 0}}{{- end }}","{{.Artifact.Type}}","{{.Vulnerability.ID}}","{{.Vulnerability.Severity}}","{{- if .Vulnerability.EPSS }}{{- if gt (len .Vulnerability.EPSS) 0 }}{{(index .Vulnerability.EPSS 0).Percentile}}{{- else }}0{{- end }}{{- else }}0{{- end }}","{{- if .Vulnerability.Risk }}{{.Vulnerability.Risk}}{{- else }}0{{- end }}","{{.Vulnerability.ID}}"' >> grype-custom.tmpl
            echo '{{- end -}}' >> grype-custom.tmpl
            
            # Run Grype scans
            if grype "$full_image" --output template -t grype-custom.tmpl --file "$temp_template" && \
               grype "$full_image" --output json --file "$temp_json"; then
              
              echo "✅ Successfully scanned: $full_image"
              
              # Count all vulnerabilities from JSON (not just those with fixes)
              vuln_count=$(jq '[.matches[]?] | length' "$temp_json" 2>/dev/null || echo "0")
              
              # Add to summary table
              echo "| $full_image | ✅ Success | $vuln_count |" >> "$summary_table_temp"
              
              # Process template output and add to consolidated JSON
              echo "    {" >> "$results_dir/scan-grype.json"
              echo "      \"image\": \"$full_image\"," >> "$results_dir/scan-grype.json"
              echo "      \"status\": \"success\"," >> "$results_dir/scan-grype.json"
              echo "      \"vulnerabilityCount\": $vuln_count," >> "$results_dir/scan-grype.json"
              echo "      \"scan\": {" >> "$results_dir/scan-grype.json"
              echo "        \"vulnerabilities\": [" >> "$results_dir/scan-grype.json"
              
              # Process each line of the template output (skip header)
              first_vuln=true
              if [ -f "$temp_template" ] && [ -s "$temp_template" ]; then
                echo "📋 Template output contents:"
                cat "$temp_template"
                echo "📋 End of template output"
                
                # Create temporary file without header for processing
                temp_data=$(mktemp)
                tail -n +2 "$temp_template" > "$temp_data"
                
                echo "📋 Data to process (without header):"
                cat "$temp_data"
                echo "📋 End of data to process"
                echo "📊 Line count in template: $(wc -l < "$temp_template")"
                echo "📊 Line count in data: $(wc -l < "$temp_data")"
                
                line_counter=0
                while IFS=',' read -r name installed fixed_in type vulnerability severity epss_raw risk published_id; do
                  line_counter=$((line_counter + 1))
                  echo "📝 Processing line $line_counter: $name,$vulnerability"
                  # Clean up the fields (remove quotes)
                  name=$(echo "$name" | sed 's/^"//;s/"$//')
                  installed=$(echo "$installed" | sed 's/^"//;s/"$//')
                  fixed_in=$(echo "$fixed_in" | sed 's/^"//;s/"$//')
                  type=$(echo "$type" | sed 's/^"//;s/"$//')
                  vulnerability=$(echo "$vulnerability" | sed 's/^"//;s/"$//')
                  severity=$(echo "$severity" | sed 's/^"//;s/"$//')
                  epss_raw=$(echo "$epss_raw" | sed 's/^"//;s/"$//')
                  risk=$(echo "$risk" | sed 's/^"//;s/"$//')
                  published_id=$(echo "$published_id" | sed 's/^"//;s/"$//')
                  
                  echo "🔍 Processing vulnerability: $vulnerability ($severity) for $name"
                  
                  # Skip if essential fields are empty
                  if [ -z "$vulnerability" ]; then
                    echo "⚠️ Skipping empty vulnerability"
                    continue
                  fi
                  
                  # Include all vulnerabilities in scan reports (not just those with fixes)
                  
                  # Calculate EPSS percentage
                  if [ "$epss_raw" != "0" ] && [ -n "$epss_raw" ]; then
                    epss=$(echo "$epss_raw * 100" | bc -l | xargs printf "%.1f")%
                  else
                    epss="0.0%"
                  fi
                  
                  # Get published date with timeout protection
                  published_date="N/A"
                  if [[ "$published_id" == CVE-* ]]; then
                    # Try to get CVE published date from NVD API with timeout
                    sleep 0.5  # Rate limiting
                    cve_data=$(timeout 10 curl -s --max-time 5 "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=$published_id" 2>/dev/null || echo "")
                    if [ -n "$cve_data" ] && [ "$cve_data" != "timeout" ]; then
                      published_date=$(echo "$cve_data" | jq -r '.vulnerabilities[0].cve.published // "N/A"' 2>/dev/null | cut -d'T' -f1 || echo "N/A")
                    fi
                  elif [[ "$published_id" == GHSA-* ]]; then
                    # Try to get GHSA published date from GitHub API with timeout
                    sleep 0.5  # Rate limiting
                    ghsa_data=$(timeout 10 curl -s --max-time 5 "https://api.github.com/advisories/$published_id" 2>/dev/null || echo "")
                    if [ -n "$ghsa_data" ] && [ "$ghsa_data" != "timeout" ]; then
                      published_date=$(echo "$ghsa_data" | grep '"published_at"' | cut -d'"' -f4 | cut -d'T' -f1 2>/dev/null || echo "N/A")
                    fi
                  fi
                  
                  # Ensure published_date is in YYYY-MM-DD format or set to N/A
                  if [[ ! "$published_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                    published_date="N/A"
                  fi
                  
                  # Add comma before vulnerability (except for first one)
                  if [ "$first_vuln" = true ]; then
                    first_vuln=false
                  else
                    echo "," >> "$results_dir/scan-grype.json"
                  fi
                  
                  # Add vulnerability to JSON
                  echo "          {" >> "$results_dir/scan-grype.json"
                  echo "            \"name\": \"$name\"," >> "$results_dir/scan-grype.json"
                  echo "            \"installed\": \"$installed\"," >> "$results_dir/scan-grype.json"
                  echo "            \"fixed_in\": \"$fixed_in\"," >> "$results_dir/scan-grype.json"
                  echo "            \"type\": \"$type\"," >> "$results_dir/scan-grype.json"
                  echo "            \"vulnerability\": \"$vulnerability\"," >> "$results_dir/scan-grype.json"
                  echo "            \"severity\": \"$severity\"," >> "$results_dir/scan-grype.json"
                  echo "            \"epss\": \"$epss\"," >> "$results_dir/scan-grype.json"
                  echo "            \"risk\": \"$risk\"," >> "$results_dir/scan-grype.json"
                  echo "            \"published_date\": \"$published_date\"" >> "$results_dir/scan-grype.json"
                  echo "          }" >> "$results_dir/scan-grype.json"
                  
                  echo "✅ Added vulnerability to JSON: $vulnerability"
                done < "$temp_data"
                
                # Clean up temporary data file
                rm -f "$temp_data"
              fi
              
              echo "" >> "$results_dir/scan-grype.json"
              echo "        ]" >> "$results_dir/scan-grype.json"
              echo "      }" >> "$results_dir/scan-grype.json"
              echo "    }" >> "$results_dir/scan-grype.json"
              
              # Add detailed vulnerability table to markdown
              echo "" >> "$results_dir/scan-grype.md"
              echo "## $full_image" >> "$results_dir/scan-grype.md"
              echo "" >> "$results_dir/scan-grype.md"
              echo "**Vulnerabilities Found:** $vuln_count" >> "$results_dir/scan-grype.md"
              echo "" >> "$results_dir/scan-grype.md"
              
              if [ "$vuln_count" -gt 0 ]; then
                echo "| Package | Version | Fix Available | Type | Vulnerability | Severity | Published Date |" >> "$results_dir/scan-grype.md"
                echo "|---------|---------|---------------|------|---------------|----------|----------------|" >> "$results_dir/scan-grype.md"
                
                # Add vulnerability details to markdown (reprocess template output)
                if [ -f "$temp_template" ] && [ -s "$temp_template" ]; then
                  # Create temporary file without header for processing
                  temp_md_data=$(mktemp)
                  tail -n +2 "$temp_template" > "$temp_md_data"
                  
                  while IFS=',' read -r name installed fixed_in type vulnerability severity epss_raw risk published_id; do
                    # Clean up the fields
                    name=$(echo "$name" | sed 's/^"//;s/"$//')
                    installed=$(echo "$installed" | sed 's/^"//;s/"$//')
                    fixed_in=$(echo "$fixed_in" | sed 's/^"//;s/"$//')
                    type=$(echo "$type" | sed 's/^"//;s/"$//')
                    vulnerability=$(echo "$vulnerability" | sed 's/^"//;s/"$//')
                    severity=$(echo "$severity" | sed 's/^"//;s/"$//')
                    published_id=$(echo "$published_id" | sed 's/^"//;s/"$//')
                    
                    [ -z "$vulnerability" ] && continue
                    
                    # Get published date (same logic as above)
                    published_date="N/A"
                    if [[ "$published_id" == CVE-* ]]; then
                      sleep 0.5
                      cve_data=$(curl -s "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=$published_id" 2>/dev/null || echo "")
                      if [ -n "$cve_data" ]; then
                        published_date=$(echo "$cve_data" | jq -r '.vulnerabilities[0].cve.published // "N/A"' 2>/dev/null | cut -d'T' -f1 || echo "N/A")
                      fi
                    elif [[ "$published_id" == GHSA-* ]]; then
                      sleep 0.5
                      ghsa_data=$(curl -s "https://api.github.com/advisories/$published_id" 2>/dev/null || echo "")
                      if [ -n "$ghsa_data" ]; then
                        published_date=$(echo "$ghsa_data" | grep '"published_at"' | cut -d'"' -f4 | cut -d'T' -f1 2>/dev/null || echo "N/A")
                      fi
                    fi
                    
                    if [[ ! "$published_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                      published_date="CVE (date unavailable)"
                    fi
                    
                    echo "| $name | $installed | $fixed_in | $type | $vulnerability | $severity | $published_date |" >> "$results_dir/scan-grype.md"
                  done < "$temp_md_data"
                  
                  # Clean up temporary markdown data file
                  rm -f "$temp_md_data"
                fi
              else
                echo "✅ No vulnerabilities found with available fixes." >> "$results_dir/scan-grype.md"
              fi
              
            else
              echo "❌ Failed to scan: $full_image"
              overall_success=false
              
              # Add failed entry to JSON
              echo "    {" >> "$results_dir/scan-grype.json"
              echo "      \"image\": \"$full_image\"," >> "$results_dir/scan-grype.json"
              echo "      \"status\": \"failed\"," >> "$results_dir/scan-grype.json"
              echo "      \"error\": \"Grype scan failed\"," >> "$results_dir/scan-grype.json"
              echo "      \"vulnerabilityCount\": 0," >> "$results_dir/scan-grype.json"
              echo "      \"scan\": {}" >> "$results_dir/scan-grype.json"
              echo "    }" >> "$results_dir/scan-grype.json"
              
              # Add to summary table
              echo "| $full_image | ❌ Failed | Scan failed |" >> "$summary_table_temp"
            fi
            
            # Cleanup temporary files
            rm -f "$temp_template" "$temp_json" "grype-custom.tmpl"
            
            image_count=$((image_count + 1))
            
          done < "$images_file"
          
          # Insert summary table rows at the correct location (after table header, before image sections)
          if [ -f "$summary_table_temp" ] && [ -s "$summary_table_temp" ]; then
            # Create temporary markdown file to reorganize content
            markdown_temp=$(mktemp)
            
            # Copy everything up to and including the table header
            head -n $(grep -n "|-------|" "$results_dir/scan-grype.md" | cut -d: -f1) "$results_dir/scan-grype.md" > "$markdown_temp"
            
            # Add the summary table rows
            cat "$summary_table_temp" >> "$markdown_temp"
            
            # Add the rest of the content (image sections)
            tail -n +$(( $(grep -n "|-------|" "$results_dir/scan-grype.md" | cut -d: -f1) + 1 )) "$results_dir/scan-grype.md" >> "$markdown_temp"
            
            # Replace the original file
            mv "$markdown_temp" "$results_dir/scan-grype.md"
            
            # Cleanup summary table temp file
            rm -f "$summary_table_temp"
          fi
          
          # Close JSON structure
          echo "" >> "$results_dir/scan-grype.json"
          echo "  ]" >> "$results_dir/scan-grype.json"
          echo "}" >> "$results_dir/scan-grype.json"
          
          echo ""
          echo "========================================================"
          echo "Grype vulnerability scan completed for base images"
          
      - name: Generate SLA Report
        run: |
          ./sla-analysis.sh "cve-management/base-images/scan-results" "Base Images" "${{ github.run_id }}"
          
      - name: Add scan metadata
        run: |
          results_dir="cve-management/base-images/scan-results"
          image_count=$(find cve-management/base-images/scan-results -name "*.json" | wc -l)
          
          # Add scan metadata to consolidated report
          echo "" >> "$results_dir/scan-grype.md"
          echo "## Scan Information" >> "$results_dir/scan-grype.md"
          echo "- **Total Images**: $image_count" >> "$results_dir/scan-grype.md"
          echo "- **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$results_dir/scan-grype.md"
          echo "- **Workflow**: ${{ github.workflow }}" >> "$results_dir/scan-grype.md"
          echo "- **Run ID**: ${{ github.run_id }}" >> "$results_dir/scan-grype.md"
          echo "- **Overall Status**: ✅ Scan completed successfully" >> "$results_dir/scan-grype.md"
          
          # Output the summary
          echo ""
          echo "Consolidated scan results for base images:"
          echo "- JSON: $results_dir/scan-grype.json"
          echo "- Markdown: $results_dir/scan-grype.md"
          echo "- SLA JSON: $results_dir/sla-compliance-report-grype.json"
          echo "- SLA Markdown: $results_dir/sla-compliance-report-grype.md"
          
      - name: Commit scan results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all scan result files
          git add cve-management/base-images/scan-results/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update base images vulnerability scan results - Grype consolidated scan: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Run: ${{ github.run_id }}"
            git push
          fi
          
      - name: Upload scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-scan-base-images
          path: cve-management/base-images/scan-results/
          retention-days: 30
