# This is a basic workflow that is manually triggered

name: Tag and Generate Images

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Select a release branch'
        required: true
        default: 'release/4.22'
        type: choice
        options:
          - release/4.22
          - release/4.23
          - release/4.24
      release_tag:
        description: 'Enter a tag for the release'
        required: true
        type: string
env:
  username: ${{secrets.DEPLOYMENT_USERNAME}}
  password: ${{secrets.DEPLOYMENT_PAT}}

jobs:
  tag-branch-and-build-image:
    runs-on: ubuntu-latest
    strategy:
       matrix:
        # repo: [ "java-activity", "java-users", "java-cluster"]
        repo: [ "java-activity"]
    steps:
      - name: Checkout release management repo
        uses: actions/checkout@v4

      # Step 2: Set up Git configuration (for tagging)
      - name: Set up Git
        run: |
          git config --global user.name ${{secrets.DEPLOYMENT_USERNAME}}
          git config --global user.email "github-actions@github.com"

      # Step 3: Checkout and tag each repository
      - name: Tag and build ${{ matrix.repo }} with branch=${{ github.event.inputs.release_branch }}, tag=${{ github.event.inputs.release_tag }}
        run: |
          git clone https://x-access-token:${{ secrets.DEPLOYMENT_PAT }}@github.com/nirmata/${{matrix.repo}}.git

          cd ${{ matrix.repo }}
          git fetch --tags

          # Check if the tag exists and delete it if it does
          if git show-ref --tags ${{ github.event.inputs.release_tag }}; then
            git tag -d ${{ github.event.inputs.release_tag }}
            git push --delete origin ${{ github.event.inputs.release_tag }}
          fi

          # Checkout the selected branch
          git checkout ${{ github.event.inputs.release_branch }}
          
          # Tag the branch with the given tag
          git tag ${{ github.event.inputs.release_tag }}
          git push origin ${{ github.event.inputs.release_tag }}
        
          # Trigger the master.yml action 
          curl -L \
             -H "Accept: application/vnd.github+json" \
             -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_PAT }}" \
             -H "X-GitHub-Api-Version: 2022-11-28" \
             -d '{"ref": "${{ github.event.inputs.release_branch }}", "inputs": {"dest_env": "nowhere - just build"}}' \
             -X POST https://api.github.com/repos/nirmata/${{ matrix.repo }}/actions/workflows/master.yml/dispatches
          
          # curl -L \
          #   -H "Accept: application/vnd.github+json" \
          #   -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_PAT }} " \
          #   -H "X-GitHub-Api-Version: 2022-11-28" \
          #   -d '{"ref":"${{github.event.inputs.release_branch}}", "inputs": {"dest_env": "nowhere - just build"}}' \
          #   -X POST https://api.github.com/repos/nirmata/${{ matrix.repo }}/actions/workflows/master.yml/dispatches

    # Step 5: Wait for the master.yml to complete
      - name: Wait for master.yml to complete for ${{ matrix.repo }}
        run: |
          # Here we could use a polling mechanism to wait for the status
          # This example assumes that the master.yml job is completed within a specific time.
          # Modify the below script according to your needs.
          sleep 30  # Wait for 30 seconds before checking status, adjust as necessary.
    
          # Check if the status of the workflow run is success or failure
          workflow_run=$(curl -s -H "Authorization: token ${{ secrets.DEPLOYMENT_PAT }}" \
            https://api.github.com/repos/nirmata/${{ matrix.repo }}/actions/runs | jq -r '.workflow_runs[0]')
    
          status=$(echo $workflow_run | jq -r '.status')
          conclusion=$(echo $workflow_run | jq -r '.conclusion')
    
          # Generate HTML report
          if [[ "$status" != "completed" || "$conclusion" != "success" ]]; then
            echo "<tr><td>${{ matrix.repo }}</td><td>Failed</td><td>$status</td><td>$conclusion</td></tr>" >> result.html
            exit 1
          else
            echo "<tr><td>${{ matrix.repo }}</td><td>Success</td><td>$status</td><td>$conclusion</td></tr>" >> result.html
          fi
  
      # Step 6: Create a basic HTML structure and upload it
      - name: Create and upload HTML report
        run: |
          echo "<html><head><title>Master Workflow Execution Results</title></head><body><h1>Master Workflow Execution Results</h1><table border='1'><tr><th>Repository</th><th>Status</th><th>Execution Status</th><th>Conclusion</th></tr>" > result.html
          cat result.html >> result.html
          echo "</table></body></html>" >> result.html
  
      # Step 7: Upload the result artifact (HTML)
      - name: Upload result artifact
        uses: actions/upload-artifact@v4
        with:
          name: master-execution-results
          path: result.html 
